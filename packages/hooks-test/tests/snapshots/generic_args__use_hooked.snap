---
source: packages/hooks-test/tests/generic_args.rs
expression: "use_hooked::hook_impl_code()"
---
fn use_hooked<'a, T: ?Sized + ToOwned + PartialEq>(
    v: &'a T,
) -> impl ::hooks::core::UpdateHookUninitialized<
    Hook = impl ::hooks::core::Hook + for<'hook> ::hooks::core::HookValue<
        'hook,
        Value = &'hook T,
    > + 'a,
> + 'a {
    enum __HooksImplNever {}
    struct __HooksValueOfThisHook<'a, T: ?Sized + ToOwned + PartialEq> {
        __: (__HooksImplNever, &'a (), ::core::marker::PhantomData<T>),
    }
    impl<'hook, 'a, T: ?Sized + ToOwned + PartialEq> ::hooks::core::HookValue<'hook>
    for __HooksValueOfThisHook<'a, T> {
        type Value = &'hook T;
    }
    ::hooks::core::fn_hook::use_fn_hook::<
        __HooksValueOfThisHook<'a, T>,
        _,
        _,
    >(move |__hooks_hook_0: ::core::pin::Pin<&mut _>| {
        use std::borrow::Borrow;
        let memo = ::hooks::core::UpdateHookUninitialized::h(
            hooks::use_mut_default::<Option<T::Owned>>(),
            __hooks_hook_0,
        );
        let memo = memo.get_or_insert_with(|| v.to_owned());
        (*memo).borrow()
    })
}

