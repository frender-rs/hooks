---
source: packages/hooks-test/tests/no_args.rs
expression: "use_type_param::hook_impl_code()"
---
fn use_type_param<T: Default>() -> impl ::hooks::core::Hook<
    (),
> + for<'hook> ::hooks::core::HookLifetime<
    'hook,
    (),
    &'hook (::core::marker::PhantomData<T>,),
    Value = T,
> + ::hooks::core::HookBounds<Bounds = (::core::marker::PhantomData<T>,)> {
    struct __HookTypes<T: Default> {
        __: ::core::marker::PhantomData<(::core::marker::PhantomData<T>,)>,
    }
    impl<T: Default> ::hooks::core::HookBounds for __HookTypes<T> {
        type Bounds = (::core::marker::PhantomData<T>,);
    }
    impl<
        'hook,
        T: Default,
    > ::hooks::core::HookLifetime<'hook, (), &'hook (::core::marker::PhantomData<T>,)>
    for __HookTypes<T> {
        type Value = T;
    }
    ::hooks::core::fn_hook::new_fn_hook::<
        (),
        _,
        __HookTypes<T>,
    >(
        (),
        ::hooks::core::fn_hook::poll_next_update_ready_false,
        |_: ::core::pin::Pin<&mut ()>, (): ()| { T::default() },
    )
}

