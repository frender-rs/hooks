---
source: packages/hooks-test/tests/return_impl_trait.rs
expression: "use_state_effect::hook_impl_code()"
---
fn use_state_effect() -> impl ::hooks::core::UpdateHookUninitialized<
    Uninitialized = impl ::hooks::core::HookPollNextUpdate + ::hooks::core::HookUnmount + ::core::default::Default,
    Hook = impl ::hooks::core::Hook + for<'hook> ::hooks::core::HookValue<
        'hook,
        Value = impl Display,
    >,
> {
    enum __HooksImplNever {}
    struct __HooksValueOfThisHook<HooksImplTrait0: Display> {
        __: (__HooksImplNever, ::core::marker::PhantomData<HooksImplTrait0>),
    }
    impl<'hook, HooksImplTrait0: Display> ::hooks::core::HookValue<'hook>
    for __HooksValueOfThisHook<HooksImplTrait0> {
        type Value = HooksImplTrait0;
    }
    ::hooks::core::fn_hook::use_fn_hook::<
        __HooksValueOfThisHook<_>,
        _,
        _,
    >(move |__hooks_hook_data: ::core::pin::Pin<&mut _>| {
        ::hooks::core::__impl_pin_project_hook_tuple!(
            __hooks_hook_data, __hooks_hook_0, __hooks_hook_1,
        );
        let (state, updater) = ::hooks::core::UpdateHookUninitialized::h(
            ::hooks::use_state_with::<i32>(Default::default),
            __hooks_hook_0,
        );
        let updater = updater.clone();
        ::hooks::core::UpdateHookUninitialized::h(
            ::hooks::use_effect(
                move |v: &_| {
                    if *v < 2 {
                        updater.set(*v + 1)
                    }
                },
                *state,
            ),
            __hooks_hook_1,
        );
        *state
    })
}
