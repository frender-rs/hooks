---
source: packages/hooks-test/tests/no_args.rs
expression: "use_str_state::hook_impl_code()"
---
fn use_str_state() -> impl ::hooks::core::UpdateHookUninitialized<
    Hook = impl ::hooks::core::Hook + for<'hook> ::hooks::core::HookValue<
        'hook,
        Value = &'hook str,
    >,
> {
    enum __HooksImplNever {}
    struct __HooksValueOfThisHook {
        __: (__HooksImplNever,),
    }
    impl<'hook> ::hooks::core::HookValue<'hook> for __HooksValueOfThisHook {
        type Value = &'hook str;
    }
    ::hooks::core::fn_hook::use_fn_hook::<
        __HooksValueOfThisHook,
        _,
        _,
    >(move |__hooks_hook_0: ::core::pin::Pin<&mut _>| {
        let (state, updater) = ::hooks::core::UpdateHookUninitialized::h(
            ::hooks::use_state_with(String::new),
            __hooks_hook_0,
        );
        updater
            .replace_maybe_with_fn_pointer(|old| {
                if old.len() < 2 { Some(format!("{old} ")) } else { None }
            });
        state
    })
}

