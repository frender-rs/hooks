---
source: packages/hooks-test/tests/no_args.rs
expression: "use_state_effect::hook_impl_code()"
---
fn use_state_effect() -> impl ::hooks::core::UpdateHookUninitialized<
    Hook = impl ::hooks::core::Hook + for<'hook> ::hooks::core::HookValue<
        'hook,
        Value = &'hook i32,
    >,
> {
    enum __HooksImplNever {}
    struct __HooksValueOfThisHook {
        __: (__HooksImplNever,),
    }
    impl<'hook> ::hooks::core::HookValue<'hook> for __HooksValueOfThisHook {
        type Value = &'hook i32;
    }
    ::hooks::core::fn_hook::use_fn_hook::<
        __HooksValueOfThisHook,
        _,
        _,
    >(move |__hooks_hook_data: ::core::pin::Pin<&mut _>| {
        let (__hooks_hook_0, __hooks_hook_1) = unsafe {
            let ::hooks::core::HookTuple((__hooks_hook_0, __hooks_hook_1)) = ::core::pin::Pin::get_unchecked_mut(
                __hooks_hook_data,
            );
            (
                ::core::pin::Pin::new_unchecked(__hooks_hook_0),
                ::core::pin::Pin::new_unchecked(__hooks_hook_1),
            )
        };
        let (state, updater) = ::hooks::core::UpdateHookUninitialized::h(
            ::hooks::use_state_with(Default::default),
            __hooks_hook_0,
        );
        let updater = updater.clone();
        ::hooks::core::UpdateHookUninitialized::h(
            ::hooks::use_effect(
                move |v: &_| {
                    if *v < 2 {
                        updater.set(*v + 1)
                    }
                },
                *state,
            ),
            __hooks_hook_1,
        );
        state
    })
}

